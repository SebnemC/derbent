name: AI Code Review (Derbent)

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    if: github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq is available
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get PR diff
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            git fetch --all --prune
            # Compare last two commits on the checked-out branch
            git diff --unified=0 HEAD~1 HEAD > pr.diff || true
          else
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            git diff --unified=0 --diff-filter=ACMR "$BASE_SHA" "$HEAD_SHA" > pr.diff || true
          fi
          head -c 60000 pr.diff > pr_trunc.diff

      - name: Build prompt
        shell: bash
        run: |
          cat > prompt.txt <<'EOF'
You are a senior Java enterprise and Vaadin UI software engineer reviewing a Pull Request for the Derbent project.

Derbent-specific checklist:
1) Make sure it's consistent with the existing Derbent project structure.
2) Do not break other components.
3) Follow rules in /derbent/src/docs/copilot-java-strict-coding-rules.md.
4) If necessary, create base classes instead of duplicating logic.

Focus areas:
- Java (Spring Boot, Hibernate/JPA, transactions, LazyInitializationException, N+1 queries)
- Null-safety, exception handling, separation of concerns, maintainability
- Vaadin (component hierarchy, event handling, listener leaks, Grid/ComboBox live updates)
- Security (validation, authN/Z, secrets)
- Tests (missing/weak coverage)

Return Markdown with sections:
- Summary
- Major Issues
- Minor Issues
- Suggested Tests
- Per-file Notes
- Suggested Commit Messages (conventional commits)

Here is the PR diff (unified=0):

```diff
EOF
          cat pr_trunc.diff >> prompt.txt
          printf "\n```\n" >> prompt.txt

      - name: Call OpenAI API (gpt-4o)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          BODY=$(jq -Rs --slurpfile sys <(echo 'You are a precise, senior Java/Vaadin reviewer for the Derbent project. Keep response under ~900 words.') \
            '{model:"gpt-4o", messages:[ {role:"system", "content":$sys[0]}, {role:"user", "content":.} ], temperature:0.2, max_tokens:1500}' < prompt.txt)

          curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            | tee openai.json >/dev/null

          jq -r '.choices[0].message.content // "AI review could not be generated."' openai.json > review.md

      - name: Post PR comment (or log on manual)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('review.md', 'utf8').trim() || "AI review could not be generated.";
            if (context.eventName === 'workflow_dispatch') {
              core.info("Manual run output:\n" + body);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body
              });
            }
